generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model SnowballPaymentSchedule {
  id                  String   @id @default(cuid())
  paymentDate         DateTime @map("payment_due_date")
  totalInitialBalance Float    @map("total_initial_balance")
  monthTotalPayment   Float    @map("month_total_payment")
  extraPayAmount      Float    @map("extra_pay_amount")
  totalInterestPaid   Float    @map("total_interest_paid")
  remainingBalance    Float    @map("balance_until_now")
  data                Json     @map("data")
  userId              String?
  user                User?    @relation(fields: [userId], references: [id])

  @@unique([userId, paymentDate])
  @@map("snowball_payment_schedule")
}

model PaymentSchedule {
  id                  String           @id @default(cuid())
  paymentDate         DateTime         @map("payment_due_date")
  title               String           @map("title")
  monthlyInterestPaid Float            @map("monthly_interest")
  monthlyPayment      Float            @map("monthly_payment")
  remainingBalance    Float            @map("remaining_balance")
  extraPayAmount      Float            @default(0) @map("extra_payment")
  FinancialRecordId   String?          @map("financial_record_id")
  createdAt           DateTime         @default(now()) @map("created_at")
  updatedAt           DateTime         @updatedAt @map("updated_at")
  userId              String?
  minPayAmount        Float            @map("minimum_payment")
  financialRecord     FinancialRecord? @relation(fields: [FinancialRecordId], references: [id])
  user                User?            @relation(fields: [userId], references: [id])

  @@unique([paymentDate, title, userId])
}

model FinancialRecord {
  id              String            @id @default(cuid())
  title           String
  type            DebitType
  subtype         String?
  periodicity     Periodicity
  initialBalance  Float             @map("initial_outstanding_balance")
  interestRate    Float             @map("interest_rate")
  minPayAmount    Float             @map("minimum_payment")
  payDueDate      DateTime          @map("payment_due_date")
  extraPayAmount  Float             @default(0) @map("extra_payment")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  userId          String?           @map("user_id")
  user            User?             @relation(fields: [userId], references: [id])
  PaymentSchedule PaymentSchedule[]
  bank            String?
  accountCategory AccountCategory?

  @@unique([title, userId])
}

model User {
  name                String
  createdAt           DateTime                  @default(now()) @map("created_at")
  email               String                    @unique
  id                  String                    @id @default(cuid())
  password            String?
  lastLogin           DateTime                  @default(now()) @map("last_login")
  debts               FinancialRecord[]
  paymentSchedule     PaymentSchedule[]
  snowball            SnowballPaymentSchedule[]
  stripeCustomerId    String?
  subscriptionStatus  SubscriptionStatus?
  isActive            Boolean?
  isTrial             Boolean?
  trialEndsAt         DateTime?
  isShowPaywall       Boolean?
  isAddedFreeStrategy Boolean?
  priority            String[]
  phoneNumber         String?
  loginType           AccountType?
  isVerified          Boolean                   @default(false)

  @@map("users")
}

model verificationToken {
  id        String           @id @default(cuid())
  type      VerificationType
  token     String
  email     String
  createdAt DateTime         @default(now())
  expiresAt DateTime
  used      Boolean          @default(false)
}

enum VerificationType {
  signup
  passwordReset
  updateProfile
  passwordUpdateAPI
}

enum AccountType {
  google
  credentials
}

enum DebitType {
  CreditCard
  AutoLoan
  PersonalLoan
  StudentLoan
  Mortgage
  MedicalLoan
  Taxes
  BusinessLoan
  Other
}

enum SubscriptionStatus {
  active
  cancelled
  failed
}

enum Periodicity {
  MONTH
}

enum AccountCategory {
  Personal
  Business
  Mixed
}

model BudgetMonth {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  income    Float
  needs     Json
  wants     Json
  savings   Json
  debts     Json
  assets    Json?
  month     Float
  year      Float
  userId    String

  @@unique([userId, year, month])
}

model PlaidLink {
  id                 String         @id @default(cuid())
  createdAt          DateTime       @default(now()) @map("created_at")
  userId             String
  itemId             String
  accessToken        String
  institutionName    String
  institutionID      String
  status             String?
  transactionsCursor String?
  accounts           PlaidAccount[]
}

// model FinancialRecord {
//   id              String            @id @default(cuid())
//   title           String
//   type            DebitType
//   subtype         String?
//   periodicity     Periodicity
//   initialBalance  Float             @map("initial_outstanding_balance")
//   interestRate    Float             @map("interest_rate")
//   minPayAmount    Float             @map("minimum_payment")
//   payDueDate      DateTime          @map("payment_due_date")
//   extraPayAmount  Float             @default(0) @map("extra_payment")
//   createdAt       DateTime          @default(now()) @map("created_at")
//   updatedAt       DateTime          @updatedAt @map("updated_at")
//   userId          String?           @map("user_id")
//   user            User?             @relation(fields: [userId], references: [id])
//   PaymentSchedule PaymentSchedule[]
//   bank            String?

//   @@unique([title, userId])
// }

model PlaidAccount {
  id                     String             @id @default(cuid())
  plaidAccountId         String             @unique
  name                   String
  mask                   String?
  officialName           String?
  currentBalance         Float? //Decimal?  @db.Decimal(28, 10)
  availableBalance       Float? //Decimal?  @db.Decimal(28, 10)
  isoCurrencyCode        String?
  unofficialCurrencyCode String?
  type                   String
  subtype                String?
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  itemId                 String
  item                   PlaidLink          @relation(fields: [itemId], references: [id], onDelete: Cascade)
  transactions           PlaidTransaction[]
  accountCategory        AccountCategory?
  bank                   String?
  bankId                 String?

  @@map("accounts_table")
}

model PlaidTransaction {
  id                     Int              @id @default(autoincrement())
  plaidTransactionId     String           @unique
  category               String?
  subcategory            String?
  type                   String?
  subtype                String?
  name                   String
  amount                 Float //@db.Decimal(28, 10)
  isoCurrencyCode        String?
  unofficialCurrencyCode String?
  date                   DateTime         @db.Date
  year                   Int
  month                  Int
  pending                Boolean
  accountOwner           String?
  createdAt              DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime         @updatedAt @db.Timestamptz(6)
  accountId              String
  account                PlaidAccount     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountCategory        AccountCategory?
  logoUrl                String?
  categoryUrl            String?
  website                String?
  bank                   String?
  // connect to user and item?
  userId                 String?
  itemId                 String?

  @@map("transactions")
}

// The link_events_table is used to log responses from the Plaid API for client requests to the
// Plaid Link client. This information is useful for troubleshooting.
model LinkEventsTable {
  id            Int      @id @default(autoincrement())
  type          String   @map("type")
  userId        Int?     @map("user_id")
  linkSessionId String?  @map("link_session_id")
  requestId     String   @unique @map("request_id")
  errorType     String?  @map("error_type")
  errorCode     String?  @map("error_code")
  status        String?  @map("status")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("link_events_table")
}

// The plaid_api_events_table is used to log responses from the Plaid API for server requests to
// the Plaid client. This information is useful for troubleshooting.
model PlaidApiEventsTable {
  id          Int      @id @default(autoincrement())
  itemId      Int?     @map("item_id")
  userId      Int?     @map("user_id")
  plaidMethod String   @map("plaid_method")
  arguments   String?  @map("arguments")
  requestId   String   @unique @map("request_id")
  errorType   String?  @map("error_type")
  errorCode   String?  @map("error_code")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("plaid_api_events_table")
}
